@page "/fetchdata"
@using WatchList.Blazor.Data
@using WatchList.Domain.WatchItems
@inject WatchItemService Service

<PageTitle>Watch items</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Watch list</MudText>
<MudText Class="mb-8">This component demonstrates fetching data from the server.</MudText>
@if (forecasts == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Items="forecasts" Hover="true" SortLabel="Sort By" Elevation="0">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<WatchItem, object>(x=>x.Title)">Title</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<WatchItem, object>(x=>x.Status.Name)">Status</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<WatchItem, object>(x=>x.Type.Name)">Type</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<WatchItem, object>(x=>x.Rating)">Rating</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Status">@context.Status.Name</MudTd>
            <MudTd DataLabel="Type">@context.Type.Name</MudTd>
            <MudTd DataLabel="Rating">@context.Rating</MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new int[]{50, 100}" />
        </PagerContent>
    </MudTable>
}


@code {
    private WatchItem[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Service.GetAllAsync();
    }
}
