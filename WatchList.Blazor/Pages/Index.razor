@page "/"

@using WatchList.Domain.WatchItems.Entity
@using WatchList.Domain.WatchItems.Repository
@using X.PagedList

@inject IWatchItemRepository Repository
@inject NavigationManager Navigation

<PageTitle>Watch items</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Watch list</MudText>
<MudText Class="mb-8">This component demonstrates fetching data from the server.</MudText>
@if (_forecasts == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudGrid>
        <MudItem xs="4">
            <MudTextField Label="Title" Variant="Variant.Text" @bind-Value="_filter.Title"></MudTextField>
        </MudItem>
        <MudItem xs="4">
            <MudSelect T="Status" @bind-Value="_filter.Status" Label="Status" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="@Status.Unknown">All</MudSelectItem>
                @foreach (var status in Status.List)
                {
                    if (status != Status.Unknown)
                    {
                        <MudSelectItem Value="@status"/>
                    }
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="4">
            <MudSelect T="WatchItemType" @bind-Value="_filter.Type" Label="Type" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                <MudSelectItem Value="@WatchItemType.Unknown">All</MudSelectItem>
                @foreach (var type in WatchItemType.List)
                {
                    if (type != WatchItemType.Unknown)
                    {
                        <MudSelectItem Value="@type"/>
                    }
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="4">
            <MudDatePicker Label="Release date from" Editable="true" @bind-Date="_filter.ReleaseDateFrom"/>
        </MudItem>
        <MudItem xs="4">
            <MudDatePicker Label="Release date to" Editable="true" @bind-Date="_filter.ReleaseDateTo"/>
        </MudItem>
        <MudItem xs="4">
            <MudButton OnClick="SearchAsync" Color="Color.Primary" Variant="Variant.Filled">Search</MudButton>
        </MudItem>
    </MudGrid>
    <MudTable Items="@_forecasts" Hover="true" SortLabel="Sort By" Elevation="0" Class="mt-7">
        <HeaderContent>
            <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<BriefWatchItemDetail, object>(x=>x.Title)">Title</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<BriefWatchItemDetail, object>(x=>x.Status.Name)">Status</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<BriefWatchItemDetail, object>(x=>x.Type.Name)">Type</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<BriefWatchItemDetail, object>(x=>x.Rating)">Rating</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<BriefWatchItemDetail, object>(x=>x.ReleaseDate)">Release date</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel T="BriefWatchItemDetail">Actions</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Status">@context.Status.Name</MudTd>
            <MudTd DataLabel="Type">@context.Type.Name</MudTd>
            <MudTd DataLabel="Rating">@context.Rating</MudTd>
            <MudTd DataLabel="Release date">@context.ReleaseDate</MudTd>
            <MudTd DataLabel="Actions">
                <MudButton OnClick="@(() => Edit(@context.Id))" Color="Color.Primary" Variant="Variant.Filled">Edit</MudButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudPagination Count="@_forecasts.PageCount" Selected="@_filter.Page.PageNumber" SelectedChanged="OnPageChanged"></MudPagination>
        </PagerContent>
    </MudTable>
}


@code {
    private BriefWatchItemDetailFilter _filter = new();
    private IPagedList<BriefWatchItemDetail>? _forecasts;

    protected override async Task OnInitializedAsync()
    {
        await SearchAsync();
    }

    private Task OnPageChanged(int page)
    {
        _filter.Page.PageNumber = page;
        return SearchAsync();
    }

    private async Task SearchAsync()
    {
        _forecasts = await Repository.GetBriefWatchItemDetailPageAsync(_filter);
    }

    private void Edit(Guid watchItemId)
    {
        Navigation.NavigateTo($"WatchItemEditPage/{watchItemId}");
    }

}
